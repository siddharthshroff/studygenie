import { useState } from "react";
import { Flashcard } from "./flashcard";
import { FlashcardEditor } from "./flashcard-editor";
import { Button } from "@/components/ui/button";
import type { Flashcard as FlashcardType } from "@shared/schema";
import type { GeneratedFlashcard } from "@/lib/types";

interface FlashcardGridProps {
  flashcards: FlashcardType[] | GeneratedFlashcard[];
  studySetId?: number;
  onEdit?: (flashcard: FlashcardType) => void;
  onDelete?: (id: number) => void;
  onAdd?: () => void;
  isGenerated?: boolean;
}

export function FlashcardGrid({ 
  flashcards, 
  studySetId, 
  onEdit, 
  onDelete, 
  onAdd, 
  isGenerated = false 
}: FlashcardGridProps) {
  const [showEditor, setShowEditor] = useState(false);
  const [editingFlashcard, setEditingFlashcard] = useState<FlashcardType | null>(null);

  const handleEdit = (flashcard: FlashcardType) => {
    setEditingFlashcard(flashcard);
    setShowEditor(true);
    onEdit?.(flashcard);
  };

  const handleAddNew = () => {
    setEditingFlashcard(null);
    setShowEditor(true);
    onAdd?.();
  };

  return (
    <>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {flashcards.map((flashcard, index) => {
          if (isGenerated) {
            const generatedCard = flashcard as GeneratedFlashcard;
            return (
              <div key={index} className="perspective-1000">
                <div className="relative w-full h-48 cursor-pointer transition-transform duration-500">
                  <div className="absolute inset-0 w-full h-full bg-gradient-to-br from-primary-500 to-primary-700 rounded-xl shadow-lg p-6 flex flex-col justify-between">
                    <div className="flex items-center justify-between">
                      <span className="text-xs font-medium text-primary-100 bg-primary-600 px-2 py-1 rounded">Question</span>
                    </div>
                    <div className="flex-1 flex items-center justify-center">
                      <p className="text-white font-medium text-center leading-relaxed">{generatedCard.question}</p>
                    </div>
                    <div className="text-center">
                      <span className="text-xs text-primary-100">Generated by AI</span>
                    </div>
                  </div>
                </div>
              </div>
            );
          }

          const savedCard = flashcard as FlashcardType;
          return (
            <Flashcard
              key={savedCard.id}
              flashcard={savedCard}
              onEdit={handleEdit}
              onDelete={onDelete}
            />
          );
        })}

        {/* Add New Flashcard Button */}
        <div 
          className="w-full h-48 border-2 border-dashed border-gray-300 rounded-xl flex items-center justify-center cursor-pointer hover:border-primary-400 hover:bg-primary-50 transition-colors"
          onClick={handleAddNew}
        >
          <div className="text-center">
            <div className="w-12 h-12 bg-gray-200 rounded-full flex items-center justify-center mx-auto mb-3">
              <i className="fas fa-plus text-gray-500 text-xl"></i>
            </div>
            <p className="text-gray-600 font-medium">Add New Flashcard</p>
          </div>
        </div>
      </div>

      {showEditor && (
        <FlashcardEditor
          flashcard={editingFlashcard}
          studySetId={studySetId}
          onClose={() => setShowEditor(false)}
        />
      )}
    </>
  );
}
